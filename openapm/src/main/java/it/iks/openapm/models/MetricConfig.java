package it.iks.openapm.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import it.iks.openapm.models.contracts.AggregableConfig;
import it.iks.openapm.models.contracts.FilterableConfig;
import org.springframework.data.annotation.Id;
import org.springframework.data.elasticsearch.annotations.Document;

import java.util.Arrays;

/**
 * Metric generation configuration
 */
@Document(indexName = "#{@metricsConfigIndex}", type = "#{@metricsConfigType}")
public class MetricConfig implements AggregableConfig, FilterableConfig {
    /**
     * Database identifier
     */
    @Id
    private String id;

    /**
     * Metric name in destination database
     */
    private String name;

    /**
     * Cron expression representing when the job should be triggered
     */
    private String cron;

    /**
     * Duration of the job in seconds
     *
     * Generally used to identify how much time we must look back to fetch records.
     *
     * TODO: Substitute this field with a dynamic calculation between cron expression triggering (Time from last
     * trigger)
     */
    private long duration;

    /**
     * Index/Table to fetch traces from
     */
    @JsonProperty("traces_index")
    private String tracesIndex;

    /**
     * Index/Table to save metrics into
     */
    @JsonProperty("metrics_index")
    private String metricsIndex;

    /**
     * Set of operations to filter traces
     */
    private Operation[] filters;

    /**
     * Operation to aggregate traces into group before calculations
     */
    private Operation aggregation;

    /**
     * Operation to execute to reduce group of traces into a metric
     */
    private Operation calculation;

    /**
     * Initialize an empty metric configuration
     *
     * (Needed for Spring Data)
     */
    public MetricConfig() {
        this(null, null, null, null, null, new Operation[]{}, null, null);
    }

    /**
     * Initialize a configuration with minimal needed values
     *
     * @param name
     * @param cron
     * @param tracesIndex
     * @param metricsIndex
     */
    public MetricConfig(String name, String cron, String tracesIndex, String metricsIndex) {
        this(null, name, cron, tracesIndex, metricsIndex, new Operation[]{}, null, null);
    }

    /**
     * Initialize a full-featured metric configuration
     *
     * @param id
     * @param name
     * @param cron
     * @param tracesIndex
     * @param metricsIndex
     * @param filters
     * @param aggregation
     * @param calculation
     */
    public MetricConfig(String id,
                        String name,
                        String cron,
                        String tracesIndex,
                        String metricsIndex,
                        Operation[] filters,
                        Operation aggregation,
                        Operation calculation) {
        this.id = id;
        this.name = name;
        this.cron = cron;
        this.tracesIndex = tracesIndex;
        this.metricsIndex = metricsIndex;
        this.filters = filters;
        this.aggregation = aggregation;
        this.calculation = calculation;
    }

    /////////////////////////////// AUTOGENERATED METHODS ///////////////////////////////


    public String getId() {
        return id;
    }

    public MetricConfig setId(String id) {
        this.id = id;
        return this;
    }

    public String getName() {
        return name;
    }

    public MetricConfig setName(String name) {
        this.name = name;
        return this;
    }

    public String getCron() {
        return cron;
    }

    public MetricConfig setCron(String cron) {
        this.cron = cron;
        return this;
    }

    public long getDuration() {
        return duration;
    }

    public MetricConfig setDuration(long duration) {
        this.duration = duration;
        return this;
    }

    public String getTracesIndex() {
        return tracesIndex;
    }

    public MetricConfig setTracesIndex(String tracesIndex) {
        this.tracesIndex = tracesIndex;
        return this;
    }

    public String getMetricsIndex() {
        return metricsIndex;
    }

    public MetricConfig setMetricsIndex(String metricsIndex) {
        this.metricsIndex = metricsIndex;
        return this;
    }

    @Override
    public Operation[] getFilters() {
        return filters;
    }

    public MetricConfig setFilters(Operation[] filters) {
        this.filters = filters;
        return this;
    }

    @Override
    public Operation getAggregation() {
        return aggregation;
    }

    public MetricConfig setAggregation(Operation aggregation) {
        this.aggregation = aggregation;
        return this;
    }

    public Operation getCalculation() {
        return calculation;
    }

    public MetricConfig setCalculation(Operation calculation) {
        this.calculation = calculation;
        return this;
    }

    @Override
    public String toString() {
        return "MetricConfig{" +
                "id='" + id + '\'' +
                ", name='" + name + '\'' +
                ", cron='" + cron + '\'' +
                ", duration=" + duration +
                ", tracesIndex='" + tracesIndex + '\'' +
                ", metricsIndex='" + metricsIndex + '\'' +
                ", filters=" + Arrays.toString(filters) +
                ", aggregation=" + aggregation +
                ", calculation=" + calculation +
                '}';
    }
}
